{"id":33,"title":"用Vue-Awesome-Swiper实现旋转叠加轮播效果&平移轮播效果","subTitle":"","link":null,"description":"","content":"## 实现效果\n- 旋转叠加\n![旋转叠加效果](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/8/14/16c9054325ebe84c~tplv-t2oaga2asx-image.image)\n\n- 平移\n![旋转叠加效果效果](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/8/14/16c9054900fd93ac~tplv-t2oaga2asx-image.image)\n\n> 前段时间做Hybrid App，UI设计湿要求某一个页面的展示要实现滑动轮播效果，选中的内容卡片居中显示，上一个内容卡片和下一个内容以小一倍的大小显示在选中的卡片后头，而且要高斯模糊等等。。最骚的是滑动特效要是一个个旋转叠加。（摔！\n\n> 当时用的是vue-cli-3 + ant-design-vue实现的页面，发现ant-design-vue里头有现成的Carousel组件可用，由于排期比较急，先暂时用这个实现了第一版，没有特效没有其他花里胡哨的展示。验收完第一版后，发现ant-design-vue的坑是真的多啊。。Carousel在移动端也是十分的不流畅。总是就是体验特别的不好。最后一气之下，全部样式自己写，全部组件自己封装，将ant-design-vue完完整整移出了项目。\n\n> 轮播图这块想到了Swiper这一好东西，现在已经有了vue版，但是是没有专门的vue版文档的，可以找到的项目也比较少。无奈之下啃了Swiper4文档，一顿猛操作，摸到了一点点门道。把需求实现了是也。简单整理了一下，写了个简单的小demo，记录一下，如果可以帮到你那是最好啦~\n\n#### 1.首先引入Vue-Awesome-Swiper\n引入Vue-Awesome-Swiper有两种方式，一种是全局引入，一种是组件内引入。如果你的项目里只有一个地方要用到这玩意，那就在用到的那个页面引入就行，如果多个地方要用到，那就全局引入吧。\n\n- 全局引入：\n```js\n// main.js\nimport VueAwesomeSwiper from 'vue-awesome-swiper'\nimport 'swiper/dist/css/swiper.css'\n\nVue.use(VueAwesomeSwiper, /* { default global options } */)\n```\n\n- 组件内引入：\n```js\n// xxx.vue\n<script>\nimport 'swiper/dist/css/swiper.css'\nimport { swiper, swiperSlide } from 'vue-awesome-swiper'\n\nexport default {\n  components: {\n    swiper,\n    swiperSlide\n  }\n}\n</script>\n```\n\n\n#### 2.在页面使用\n```js\n<template>\n  <div class=\"swiper-content\">\n    <swiper ref=\"mySwiper\" :options=\"swiperOption\" class=\"show-swiper\">\n      <template v-for=\"(item, index) in list\">\n        <swiper-slide :key=\"index\">\n          <div class=\"swiper-item\">\n            <span>{{ item }}</span>\n          </div>\n        </swiper-slide>\n      </template>\n    </swiper>\n  </div>\n</template>\n```\n> js部分\n- 旋转叠加\n\n```js\n<script>\nimport { mapState } from 'vuex'\nimport store from '@/store'\nexport default {\n  data() {\n    return {\n      list: [1, 2, 3, 4, 5, 6],\n      swiperOption: {\n        // 设置slider容器能够同时显示的slides数量，默认为1， 'auto'则自动根据slides的宽度来设定数量\n        slidesPerView: 'auto',\n        /*\n        * 开启这个参数来计算每个slide的progress(进度、进程)\n        * 对于slide的progress属性，活动的那个为0，其他的依次减1\n        */\n        watchSlidesProgress: true,\n        // 默认active slide居左，设置为true后居中\n        centeredSlides: true,\n        // 当你创建一个Swiper实例时是否立即初始化，这里我们手动初始化\n        init: false,\n        longSwipesRatio: 0.1,\n        touchReleaseOnEdges: true,\n        observer: true, // 修改swiper自己或子元素时，自动初始化swiper\n        observeParents: true, // 修改swiper的父元素时，自动初始化swiper\n        on: {\n          progress: function() {\n            for (let i = 0; i < this.slides.length; i++) {\n              const slide = this.slides.eq(i) // 指定匹配元素集缩减值\n              const slideProgress = this.slides[i].progress // 当前元素集的progress值\n\n              let modify = 0 // 偏移权重\n              if (parseInt(Math.abs(slideProgress)) > 0) {\n                modify = Math.abs(slideProgress) * 0.2 // 不一定要0.2，可自行调整\n              }\n              const translate = slideProgress * modify * 500 + 'px' // 500是swiper-slide的宽度\n              const scale = 1 - Math.abs(slideProgress) / 5 // 缩放权重值，随着progress由中向两边依次递减，可自行调整\n              const zIndex = 99 - Math.abs(Math.round(10 * slideProgress))\n              slide.transform(`translateX(${translate}) scale(${scale})`)\n              slide.css('zIndex', zIndex)\n              slide.css('opacity', 1) // 是否可见\n              if (parseInt(Math.abs(slideProgress)) > 1) { // 设置了只有选中的元素以及他两遍的显示，其他隐藏\n                slide.css('opacity', 0)\n              }\n            }\n          },\n          slideChange: function() {\n            store.commit('SET_ACTIVE_INDEX', this.activeIndex)\n          }\n        }\n      }\n    }\n  },\n  computed: {\n    swiper() {\n      return this.$refs.mySwiper.swiper\n    },\n    ...mapState({\n      activeItemIndex: state => state.activeIndex\n    })\n  },\n  mounted() {\n    this.initSwiper()\n  },\n  methods: {\n    initSwiper() {\n      this.$nextTick(async() => {\n        await this.swiper.init() // 现在才初始化\n        await this.swiper.slideTo(this.activeItemIndex)\n      })\n    }\n  }\n}\n</script>\n```\n\n\n- 平移\n\n```js\n<script>\nimport { mapState } from 'vuex'\nimport store from '@/store'\nexport default {\n  data() {\n    return {\n      list: [1, 2, 3, 4, 5, 6],\n      swiperOption: {\n        slidesPerView: 'auto',\n        watchSlidesProgress: true,\n        // 设定slide与左边框的预设偏移量（单位px）\n        slidesOffsetBefore: 37,\n        // 设置slide之间的距离（单位px）\n        spaceBetween: 17,\n        centeredSlides: true,\n        init: false,\n        longSwipesRatio: 0.1,\n        touchReleaseOnEdges: true,\n        observer: true, // 修改swiper自己或子元素时，自动初始化swiper\n        observeParents: true, // 修改swiper的父元素时，自动初始化swiper\n        on: {\n          progress: function() {\n            for (let i = 0; i < this.slides.length; i++) {\n              const slide = this.slides.eq(i)\n              const slideProgress = this.slides[i].progress\n\n              const scale = 1 - Math.abs(slideProgress) / 5 // 缩放权重值，随着progress由中向两边依次递减，可自行调整\n              slide.transform(`scale3d(${scale}, ${scale}, 1)`)\n            }\n          },\n          slideChange: function() {\n            store.commit('SET_ACTIVE_INDEX', this.activeIndex)\n          }\n        }\n      }\n    }\n  },\n  computed: {\n    swiper() {\n      return this.$refs.mySwiper.swiper\n    },\n    ...mapState({\n      activeItemIndex: state => state.activeIndex\n    })\n  },\n  mounted() {\n    this.initSwiper()\n  },\n  methods: {\n    initSwiper() {\n      this.$nextTick(async() => {\n        await this.swiper.init() // 现在才初始化\n        await this.swiper.slideTo(this.activeItemIndex)\n      })\n    }\n  }\n}\n</script>\n```\n\n配置参数那里，init我是设置的false，我是想在项目挂载完成后，获取到了接口数据之后，再用```this.swiper.init() ```去初始化轮播组件的，然后我把激活项的索引存在了vuex里头，这样每次从其他页面返回这个页面，就可以用```this.swiper.slideTo(this.activeItemIndex)```去控制我要定位到哪一个内容卡片先。\n\n\n#### 3.样式初始化方面\n```css\n.swiper-content {\n  width: 100%;\n  height: 100%;\n  position: relative;\n  overflow: hidden;\n  margin: 0 auto;\n  padding: 50px 0;\n\n  .show-swiper {\n    width: 100%;\n    height: 100%;\n    top: 0;\n    left: 0;\n\n    .swiper-slide {\n      width: 500px;\n      // 表示所有属性都有动作效果，过度时间为0.4s，以慢速开始和结束的过渡效果\n      transition: all .4s cubic-bezier(.4, 0, .2, 1);\n      \n      .swiper-item {\n        width: 100%;\n        height: 500px;\n        background: rgb(140, 172, 134);\n        border-radius: 6px;\n        color: orangered;\n        font-size: 24px;\n        line-height: 1.5;\n        border: 1px solid orangered;\n      }\n    }\n  }\n}\n```\n因为```slidesPerView: 'auto'```，所以swiper-slide我们要给他一个初始化的宽度，以便他自动计算容器宽度，然后这里我设置了动画的效果```transition: all .4s cubic-bezier(.4, 0, .2, 1);```可以根据自己的需要作出改动\n\n\n> 大概就是这些内容，是不是很简单呢。我会把源码地址贴出来，有需要的话就自行clone参考吧~，项目里我使用的是vue-cli3，可以自行调整。\n\n- [基于Vue-Awesome-Swiper + vue-cli3实现的滑动轮播项目，有旋转叠加和平移两个效果](https://github.com/ccccai/vue-swiper-demo)","tagIds":"4,5,6,7,11,10,12","author":"菜头","authorAvatar":"http://3.bp.blogspot.com/-powJHBZ_dI0/Uuax5aG2dQI/AAAAAAAAHjY/BrKvCsBzaCU/s1600/minions-gifs-animados-imagens-que-se-mexem.gif","weight":66,"type":1,"groupTimestamp":"1574804027589","cover":"https://static.turbosquid.com/Preview/2014/07/11__13_44_26/5.jpg3269969f-c6d9-4ffe-9a64-37330f9ceb79DefaultHQ.jpg","categoryId":1,"created_at":"2023-11-22T21:34:23.000Z","updated_at":"2023-11-22T21:35:32.000Z","tagList":[{"id":4,"name":"CSS"},{"id":5,"name":"ECMAScript"},{"id":6,"name":"Git"},{"id":7,"name":"LESS"},{"id":10,"name":"HTML"},{"id":11,"name":"JavaScript"},{"id":12,"name":"ES6"}],"createDate":"2019-11-27"}