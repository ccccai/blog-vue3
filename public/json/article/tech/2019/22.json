{"id":22,"title":"IE9兼容爬坑总结—vuecli3+eleUI后台管理项目兼容IE9","subTitle":"","link":null,"description":"","content":"### Q1. 不兼容ES6语法\n> 引入babel-polyfill和es6-promise两个插件，将ES6语法转化为ES5\n\n#### 1-1、安装\n```bash\ncnpm install --save-dev babel-polyfill es6-promise\n```\n\n#### 1-2、main.js引入\n```javascript\n// 解决低版本浏览器不支持promise问题\nimport 'babel-polyfill'\nimport Es6Promise from 'es6-promise'\nEs6Promise.polyfill()\n ```\n \n #### 在配置文件vue.config.js中引入\n```javascript\n// ...省略\nchainWebpack: config => {\n    // 新增\n    config.entry.app = ['babel-polyfill', './src/main.js']\n}\n// ...省略\n```\n \n### Q2. CSS Hack\n> 不可能为了兼容一个IE9，而降低了其它主流版本浏览器下的页面体验，所以我会使用CSS Hack，在IE9时再去加载兼容文件和布局。\n\n```! \nCSS hack是通过在CSS样式中加入一些特殊的符号，让不同的浏览器识别不同的符号，以达到应用不同的CSS样式的目的\n```\n#### 2-1、条件注释法\n因为我是针对IE9，所以我采用了IE浏览器专有的Hack方式：条件注释法。\n\n##### 2-1.1、在public目录创建文件夹ie9\n主要用来存放为了兼容ie9而添加的css和js补丁文件等\n\n##### 2-1.2、在ie9文件下创建css文件ie9.css\nie9样式补丁文件\n\n##### 2-1.3、在index.html的head中引入\n```html\n<head>\n    // ...\n    <!--[if lte IE 9]>\n      <link href=\"./ie9/ie9.css\" rel=\"stylesheet\"></link>\n    <![endif]-->\n</head>\n```\n\n> 这样做了之后，在浏览器是ie9时，会自动加载ie9.css文件，而在其他浏览器下则会忽略这行代码\n \n### Q3. 不兼容flex布局\n巧用`position、float、display:inline-block`属性灵活修改布局\n\n### Q4. 不兼容背景颜色的渐变写法`background: linear-gradient(...)`\n正常：\n```\nbackground: linear-gradient(180deg, #1A74E4, #2599F0);\n```\nie9兼容写法：\n```\nfilter: progid:DXImageTransform.Microsoft.gradient(GradientType=1, startColorstr=#1A74E4, endColorstr=#2599F0);\n-ms-filter: \"progid:DXImageTransform.Microsoft.gradient (GradientType=1, startColorstr=#1A74E4, endColorstr=#2599F0)\";\n```\n\n### Q5、el-table数据量多（页面有滚动条时）在ie中会导致页面卡顿\n> 原因：包裹表格的容器用了绝对或者相对定位，一般就是`.el-table`用了相对定位，但没有设置层级，在ie中z-index层级降低。\n\n> 解决方法：只需要将表格所属的父级或者祖父容器的z-index调高就行，将`.el-table`设置为10之后，卡顿问题解决\n\n### Q6、不支持placeholder\n用了一个大佬封装的js，稍微改了一下，能支持正常情况下placeholder的显示，比如登录注册页。\n\n#### 6-1、 在工具类文件夹下生成brower-version.js文件，用来判断浏览器版本\nbrower-version.js：\n```javascript\nexport default function browerVersion() {\n  var ua = navigator.userAgent\n  var ver = 0\n  var versiondata\n  var versionbool\n\n  if (ua) {\n    if (ua.match(/MSIE\\s+([\\d]+)\\./i)) {\n      ver = RegExp.$1\n    } else if (ua.match(/Trident.*rv\\s*:\\s*([\\d]+)\\./i)) {\n      ver = RegExp.$1\n    }\n  }\n\n  versiondata = parseInt(ver)\n\n  if (versiondata <= 9 && versiondata !== 0) {\n    versionbool = true\n  } else {\n    versionbool = false\n  }\n\n  // versionbool    true: 低于ie9   false: ie10+\n  return versionbool\n}\n```\n\n#### 6-2、定义全局的浏览器是否是ie9版本的判断字段\nmain.js\n```javascript\nimport browerVersion from '@/assets/utils/brower-version.js'\nconst isIE9 = browerVersion()\nVue.prototype.$browerVersion = isIE9\n```\n \n#### 6-3、工具类文件夹下创建ie-placeholder.js文件\n/assets/utils/[ie-placeholder.js](https://github.com/ccccai/ie-placeholder/blob/master/placeholder.js)\n\n#### 6-4、项目加载时就load一遍placeholder定义文件，为ie9下的input输入框加上placeholder\n在App.js调用ie-placeholder.js定义的方法\n初始化各input的placeholder\n```javascript\n<script>\nimport iePlaceholders from '@/assets/utils/ie-placeholder'\nexport default {\n  name: 'App',\n  mounted() {\n    if (this.$browerVersion) {\n      iePlaceholders()\n    }\n  }\n}\n</script>\n```\n但是涉及到elementUI的其他组件，比如日期选择，比如级联选择，就会有点问题。这里的建议还是在ie9下不要纠结显示placeholder，体验太差了。\n\n### Q7、输入框自带有文本删除按钮和密码查看按钮\n> 在ie10+的版本我们可以通过\n\n```\n::-ms-clear,\n::-ms-reveal{\n  display:none !important;\n}\n```\n\n> 这段代码来隐藏，但是我发现在ie9下面是没用的。只能通过在输入框末尾增加一个和背景同色的块来遮掉，但是这样会影响输入的内容的全显示，我的做法是就让它留着，影响不大。\n\n### Q8、input不支持type=number\n> 当input的type属性为number时，还是可以任意输入其他符号。。我选择在ie9放弃number限制的挣扎\n\n### Q9、el-upload无法使用\n> 在ie9下，el-upload是无法使用的。我引入了能够兼容ie9的其他上传插件，当浏览器为ie9时就用自定义的上传组件，当非ie9时就保持原来的el-upload组件。\n\n**用vue-upload-component替代el-upload**\n\n#### 9-1、安装vue-upload-component\n```bash\ncnpm install vue-upload-component --save\n```\n\n#### 9-2、引入\n可以全局引入也可以局部引入，因为我只有两个地方用到了上传组件，所以我选择在用到的页面引入。\n```\n<template>\n<!-- 省略n行代码 -->\n<file-upload\n    v-if=\"$browerVersion\"\n    ref=\"compatibleUpload\"\n    v-model=\"compatibleFiles\"\n    :post-action=\"`${API.UploadImg}`\"\n    @input-file=\"inputFile\"\n>\n    <el-button\n       :loading=\"uploadLoading\"\n       :icon=\"imgName ? '' : 'el-icon-upload2'\"\n       :title=\"imgName ? '重新选择' : '选择图片'\"\n        plain\n    >\n          {{ !imgName ? '上传图片' : imgName }}\n    </el-button>\n</file-upload>\n<!-- 省略n行代码 -->\n</template>\n<script>\nimport VueUploadComponent from 'vue-upload-component'\nexport default {\n  components: {\n    FileUpload: VueUploadComponent\n  },\n  data() {\n      imgSizeLimit: 2,\n      imgName: '',\n      imgUrl: '',\n      uploadLoading: false,\n      compatibleFiles: []\n  },\n  methods: {\n      inputFile(newFile, oldFile, prevent) {\n      // 添加文件\n      if (newFile && !oldFile) {\n        // 过滤不是图片后缀的文件\n        if (!/\\.(jpg|png)$/i.test(newFile.name)) {\n          this.$message.closeAll()\n          this.$message.warning('只能上传jpg/png文件，请重新选择')\n          return prevent\n        }\n        if (newFile.size > this.imgSizeLimit * 1024 * 1024) {\n          this.$message.closeAll()\n          this.$message.warning(`上传的图片的大于${this.imgSizeLimit}M，请重新选择`)\n          return prevent\n        }\n        // 自动上传\n        if (Boolean(newFile) !== Boolean(oldFile) || oldFile.error !== newFile.error) {\n          if (!this.$refs.compatibleUpload.active) {\n            this.uploadLoading = true\n            this.$refs.compatibleUpload.active = true\n          }\n        }\n      }\n\n      // 上传完成\n      if (newFile && oldFile && !newFile.active && oldFile.active) {\n        // 获得相应数据\n        this.uploadLoading = false\n        this.$refs.compatibleUpload.remove(newFile) // 删除当前文件对象\n        let response = newFile.response\n        if (Object.prototype.toString.call(response) !== '[object Object]') {\n          response = (new Function('return ' + response))()\n        } else {\n          this.$message.closeAll()\n          this.$message.error('图片上传失败, 请重新上传')\n        }\n        if ((response.resultCode === '1' || response.resultCode === 1) && response.data) {\n          this.imgUrl = response.data\n          this.imgName = newFile.name\n          this.$message.closeAll()\n          this.$message.success('图片上传成功')\n        } else {\n          this.imgUrl = ''\n          this.imgName = ''\n          this.$message.closeAll()\n          let errorMsg = response.resultMessage ? response.resultMessage : '图片上传失败, 请重新上传'\n          if (['10021'].includes(response.resultCode)) {\n            errorMsg = `上传的图片的大于${this.imgSizeLimit}M，请重新选择`\n            this.$message.warning(errorMsg)\n            return\n          }\n          this.$message.error(errorMsg)\n        }\n      }\n    }\n  }\n}\n</script>\n```\n\n> 具体用法请参考[官方文档](https://lian-yue.github.io/vue-upload-component/#/zh-cn/documents)，这要注意如果让组件自己发起请求,就是使用post-action参数，则是用iframe模拟form表单提交数据的，用这种方式传给后台的数据就是formData格式，但是不能添加header请求头。如果非要有请求头，那就要使用custom-action自定义上传方法，但是自定义上传方法的话，接口参数就不能用formData格式来传给后台了，为啥？因为ie9不支持new FormData()。。\n\n### Q10、不支持JSON.parse\n没错，在IE9以下是不支持JSON.parse方法来解析json字符串的，有两种方法来替代JSON.parse\n\n#### 10-1、eval方式\n```\nfunction strToJson(str){ \n    var json = eval('(' + str + ')'); \n    return json; \n} \n```\n\n> 但是出于安全性的考虑，建议尽量不要使用eval，如果从第三方获取数据进行解析，会存在恶意脚本代码的风险。\n\n#### 10-2、new Function方式\n```\nfunction strToJson(str){ \n    var json = (new Function(\"return \" + str))(); \n    return json; \n} \n```\n\n### Q11、vue项目在IE中自动读取缓存中的数据，不重新发请求\n> 这也不算只是ie9的问题了，ie内核都存在这个问题。当你请求接口时，请求地址和请求参数都没有变化的时候，ie是会默认从缓存中获取数据而不会重新发送请求的。\n\n![](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/10/22/16df25f00321e654~tplv-t2oaga2asx-image.image)\n\n> 只要保证我们每次的请求都是一个新的请求，就可以避免这种情况了，最简单的方式就是每次请求都带多一个时间戳参数，只需要在axios拦截器添加几行设置时间戳参数的代码即可\n```\n// request拦截器\nservice.interceptors.request.use(\n  config => {\n    const time = Date.parse(new Date()) / 1000\n    // 添加时间戳参数\n    if (config.method === 'post') {\n      config.data = {\n        ...config.data,\n        t: time\n      }\n    }\n    if (config.method === 'get') {\n      config.params = {\n        ...config.params,\n        t: time\n      }\n    }\n    return config\n  },\n  error => {\n    // Do something with request error\n    return Promise.reject(error)\n  }\n)\n```\n\n### Q11、在文本框中进行删除操作时，文本框的value不更新。\n> 在我们之前Q2创建的ie9文件夹下，新建ie9-oninput-polyfill.js文件\n\n#### 11-1、ie9-oninput-polyfill.js:\n\n```\n/* eslint-disable */\n(function (d) {\n  if (navigator.userAgent.indexOf('MSIE 9') === -1) return;\n\n  d.addEventListener('selectionchange', function() {\n    var el = d.activeElement;\n\n    if (el.tagName === 'TEXTAREA' || (el.tagName === 'INPUT' && el.type === 'text')) {\n      var ev = d.createEvent('CustomEvent');\n      ev.initCustomEvent('input', true, true, {});\n      el.dispatchEvent(ev);\n    }\n  });\n})(document);\n```\n#### 11-2、在css Hack中引入\n```html\n<head>\n    // ...\n    <!--[if lte IE 9]>\n      <link href=\"./ie9/ie9.css\" rel=\"stylesheet\"></link>\n      <script src=\"./ie9/ie9-oninput-polyfill.js\" type=\"text/javascript\"></script>\n    <![endif]-->\n</head>\n```\n\n### Q12、不能导出二进制文件流\n因为ie9一下不支持new Blob，所以不能将二进制文件流转为文件下载。解决方法是让后台改接口，不要传二进制文件流过来，直接给前端传文件下载链接\n\n### Q13、ie9下el-table的排序三角形错位\n\n![](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/10/22/16df27e22aa3c013~tplv-t2oaga2asx-image.image)\n\n解决方法：\n```\n.el-table .caret-wrapper {\n  display: inline-block;\n}\n.el-table .sort-caret{\n  display: block;\n}\n```\n\n> 好了，暂时只想到这些，后续有遗漏的会继续补充~","tagIds":"11,4,10","author":"菜头","authorAvatar":"http://3.bp.blogspot.com/-powJHBZ_dI0/Uuax5aG2dQI/AAAAAAAAHjY/BrKvCsBzaCU/s1600/minions-gifs-animados-imagens-que-se-mexem.gif","weight":99,"type":1,"groupTimestamp":"1571692421869","cover":"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/10/22/16df282c54bdf592~tplv-t2oaga2asx-jj:216:144:0:0:q75.avis","categoryId":1,"created_at":"2023-11-22T21:15:18.000Z","updated_at":"2023-11-22T21:44:00.000Z","tagList":[{"id":4,"name":"CSS"},{"id":10,"name":"HTML"},{"id":11,"name":"JavaScript"}],"createDate":"2019-10-22"}