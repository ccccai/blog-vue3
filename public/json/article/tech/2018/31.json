{"id":31,"title":"在vue中使用地图之vue-cli异步引入高德地图","subTitle":"","link":null,"description":"","content":"先上效果图：\n\n![高德地图组件](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/8/16/16c990b01caa773d~tplv-t2oaga2asx-image.image)\n\n>后台那边会给我返回需要展示的地点的信息，包括地名和经纬度。我的任务就是需要把这些地点都显示到地图上，然后点击表格里的地名，地图会相对应放大定位到该地点为中心的位置。然后地图是可以通过滚轮放大缩小滴。废话不多说，来看看要怎么整。\n\n### 1.引入高德cdn。\n我是通过异步加载js的方式去引入的，没有使用依赖包。在你自己的工具类目录下，创建js异步加载文件。\n我放在了assets目录下。\n``` javascript\n/* AMap.js\n * 异步加载的高德地图插件\n */\n export default function MapLoader() {\n    if (window.AMap) { // 已经加载成功，不重复加载\n        return new Promise((resolve) => {\n            resolve(window.AMap)\n        })\n    }\n    const loadMaps = new Promise((resolve, reject) => {\n        let mapsScript = document.createElement(\"script\")\n        mapsScript.type = \"text/javascript\"\n        mapsScript.src = \"//webapi.amap.com/maps?v=1.4.6&key=xxx&callback=init\" // key的值记得修改补充一下\n        mapsScript.onerror = reject('fail') // 引入失败\n        mapScript.onload = () => {\n            resolve(AMap)\n        }\n        document.head.appendChild(mapsScript)\n    })\n    const loadMapsUI = new Promise((resolve, reject) => {\n        let uiScript = document.createElement(\"script\")\n        uiScript.type = \"text/javascript\"\n        uiScript.src = \"//webapi.amap.com/ui/1.0/main-async.js\"\n        uiScript.onerror = reject('fail') // 引入失败\n        uiScript.onload = () => {\n          resolve('success')\n        }\n        document.head.appendChild(uiScript)\n    })\n    return Promise.all([loadMaps, loadMapsUI]).then((res) => {\n        return res[0]\n    }).catch(e => {\n        console.log(e)\n    })\n    // promise.all中的then的成功回调返回res是一个数组，分别代表loadMaps和loadMapsUI的结果，这里只返回p1的结果（map对象）就ok\n}\n```\n\n### 2. 层级地图组件\n高德地图引入后，就可以开始我们的表演了，定义一个地图组件，哪里需要用到就引入组件就可。这项目里我用了elementUI。\n```\n<!-- Amap.vue层级地图组件 -->\n<template>\n    <div v-loading=\"mapLoading\" class=\"amap-container\">\n        <div ref=\"amapContent\" style=\"min-width: 310px; height: 600px; margin: 0 auto\"></div>\n    </div>\n</template>\n<script>\nimport MapLoader from '@/assets/AMap/AMap.js'\nexport default {\n    props: {\n        markers: { // 地图上的坐标点\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        center: { // 地图中心坐标\n            type: String,\n            default: ''\n        },\n        containerIdName: { // 定义的地图容器的id名字\n            type: String,\n            default: ''\n        }\n    },\n    data() {\n        return {\n           map: null, // 定义地图实例\n           mapLoading: false\n        }\n    },\n    watch: {\n        // 如果地图中心坐标点发生改变，重新定位\n        center(newData, oldData) {\n            if (newData !== oldData) {\n                document.getElementById(this.containerName).scrollIntoView()\n                this.map.setZoomAndCenter(18, newData)\n            }\n        },\n        // 如果地图标记点发生改变，重绘地图\n        markers(newData, oldData) {\n            if (newData !== oldData) {\n                this.createMap()\n            }\n        }\n    },\n    mounted() {\n        this.createMap()\n    },\n    methods: {\n        async createMap() {\n            // 初始化Map\n            await MapLoader().then(async AMap => {\n                console.log('地图加载成功')\n                 // 初始化地图\n                await (this.map = new AMap.Map(this.containerName, {\n                    center: this.center,\n                    resizeEnable: true,\n                    zoom: 15\n                 }))\n                if (!window.AMapUI) { // 如果还没有初始化\n                    await initAMapUI() // 这里调用initAMapUI初始化\n                }\n                await this.addMarkers() // 增加点坐标\n                this.mapLoading = false\n            }).catch(err => {\n                console.log('地图加载失败', err)\n                this.$message({\n                    message: '地图加载失败',\n                    type: 'error',\n                    duration: 3000\n                 })\n            })\n            // 加载工具栏\n            await AMap.plugin(['AMap.ToolBar'], () => {\n                const toolbar = new AMap.ToolBar()\n                this.map.addControl(toolbar)\n            })\n        },\n        // 初始化标注点\n        addMarkers() {\n            AMapUI.loadUI(['overlay/SimpleMarker'], SimpleMarker => {\n                this.markers.forEach((item, index) => {\n                  new SimpleMarker({\n                    // 设置节点属性\n                    iconLabel: {\n                      // 普通文本\n                      innerHTML: `${index + 1}`,\n                      // 设置样式\n                      style: {\n                        color: '#fff',\n                        fontSize: '120%',\n                        marginTop: '2px'\n                      }\n                    },\n                    iconStyle: 'blue',\n                    map: this.map,\n                    position: [item.lon, item.lat] // 标注点的经纬度\n                  })\n                })\n            })\n        }\n    }\n}\n</script>\n```\n\n### 3. 在页面中运用地图组件\n```\n<template>\n    <div v-loading=\"loading\" class=\"page\">\n        <el-table :data=\"tableData.data\" border >\n            <template v-for=\"(item,index) in tableData.header\">\n              <el-table-column\n                v-if=\"index == 'addressDetail'\"\n                :key=\"index\"\n                :label=\"item\"\n                align=\"center\"\n                min-width=\"110px\"\n              >\n                <template slot-scope=\"scope\">\n                  <a\n                    style=\"color:#00a4ff\"\n                    @click=\"changeCenter(scope.$index)\"\n                  >{{ scope.row.addressDetail }}</a>\n                </template>\n              </el-table-column>\n              <el-table-column\n                v-else\n                :key=\"index\"\n                :label=\"item\"\n                :min-width=\"index == 'count' ? 50 : 110\"\n                :prop=\"index\"\n                align=\"center\"\n                show-overflow-tooltip\n              />\n            </template>\n        </el-table>\n        <pagination v-if=\"tableData.data\" :pager=\"pager\" @search=\"getAddressData\"/>\n        <amap\n            v-if=\"tableData.data\"\n            :center=\"mapCenter\"\n            :markers=\"mapMarkers\"\n            container-id-name=\"amapLL\"\n            style=\"margin: 20px 0 40px\"\n          />\n    </div>\n</template>\n<script>\nimport amap from '@/components/AMap/Amap'\nimport pagination from '@/components/Pagination/Pagination'\nexport default {\n    components: {\n        pagination,\n        amap\n    },\n    data() {\n        return {\n            // 分页跟表格\n            pager: {\n                pageSize: 10,\n                currentPage: 1,\n                totalPage: 1\n            },\n            loading: false,\n            // 返回的数据\n            tableData: [],\n            mapCenter: [],\n            mapMarkers: []\n        }\n    },\n    mounted() {\n        this.getAddressData()\n    },\n    methods: {\n        // 获取页面数据，请求后台接口，这里先定义假数据\n        getAddressData() {\n            this.loading = true\n            const resData = {\n                data: {\n                    list: [\n                        {\n                            addressDetail: \"吉林省长春市宽城区站前街道西广南区\",\n                            resortCount: \"3\",\n                            resortSum： \"22\"\n                        },\n                        {\n                            addressDetail: \"吉林省长春市宽城区站前街道嫩江路282号西广南区\",\n                            resortCount: \"55\",\n                            resortSum： \"22\"\n                        }\n                    ],\n                    pageNum: 0,\n                    pageSize: 0,\n                    total: 0\n                },\n                header: {\n                    addressDetail: \"位置\",\n                    resortCount: \"到过人数\",\n                    resortSum： \"到过次数\"\n                },\n                map: [\n                    {\n                        count: 1,\n                        lat: \"43.901522\",\n                        location: \"[125.320801,43.901522]\",\n                        lon: \"125.320801\"\n                    },\n                    {\n                        count: 1,\n                        lat: \"43.90155327690972\",\n                        location: \"[125.32062065972222,43.90155327690972]\",\n                        lon: \"125.32062065972222\"\n                    }\n                ]\n            }\n            this.tableData.header = resData.header\n            this.tableData.data = resData.list\n            this.pager.totalPage = resData.data.total\n            this.mapMarkers = resData.map\n            // 第一个位置信息作为地图中心点\n            this.mapCenter = this.mapMarkers.length ? [this.mapMarkers[0].lon,this.mapMarkers[0].lat] : []\n        },\n        // 定位点击的地址\n        changeCenter(index) {\n            const mapIndex = index + (this.pager.currentPage - 1) * this.pager.pageSize\n            this.mapCenter = [\n                this.mapMarkers[mapIndex].lon,\n                this.mapMarkers[mapIndex].lat\n            ]\n        }\n    }\n}\n</script>\n```\n\n> 这样就实现了以表格展示列表数据，点击地点名称地图组件定位到相对应位置的功能，希望能帮到你~","tagIds":"11,12,4,35","author":null,"authorAvatar":"http://3.bp.blogspot.com/-powJHBZ_dI0/Uuax5aG2dQI/AAAAAAAAHjY/BrKvCsBzaCU/s1600/minions-gifs-animados-imagens-que-se-mexem.gif","weight":22,"type":1,"groupTimestamp":"1540330239533","cover":"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/8/16/16c990d358feb200~tplv-t2oaga2asx-jj:216:144:0:0:q75.avis","categoryId":1,"created_at":"2023-11-22T21:31:44.000Z","updated_at":"2023-11-22T21:49:32.000Z","tagList":[{"id":4,"name":"CSS"},{"id":11,"name":"JavaScript"},{"id":12,"name":"ES6"},{"id":35,"name":"canvas"}],"createDate":"2018-10-24"}